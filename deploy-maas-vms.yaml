- name: Deploy Virsh VMs for MAAS
  hosts: localhost
  become: true
  vars_files:
  - variables.yaml

  tasks:
    - name: Install apt dependencies
      apt:
        pkg:
          - bridge-utils
          - cloud-init
          - genisoimage
          - libvirt-daemon-system
          - libvirt-clients
          - libvirt-dev
          - pkg-config
          - qemu-kvm
          - python3
          - python3-libvirt
          - python3-lxml
          - virtinst

    - name: Create work directory
      file:
        path: "{{ workdir }}"
        state: directory
        mode: "0755"

    - name: Download base jammy cloud image
      get_url:
        url: https://cloud-images.ubuntu.com/releases/jammy/release/ubuntu-22.04-server-cloudimg-amd64.img
        dest: "{{ workdir }}/ubuntu-jammy-cloudimg.img"
        mode: "0644"
      register: download_img

    - name: Stat root disk.img
      stat:
        path: "{{ workdir }}/disk.img"
      register: rootdisk_img

    - name: Prepare root disk image
      shell:
        cmd: |
          qemu-img create -f qcow2 -F qcow2 -b ubuntu-jammy-cloudimg.img disk.img
          qemu-img resize disk.img +20G
          qemu-img rebase -f qcow2 -F qcow2 -b ubuntu-jammy-cloudimg.img disk.img
        chdir: "{{ workdir }}"
      when: download_img.changed or not rootdisk_img.stat.exists

    - name: Create SSH key pair
      community.crypto.openssh_keypair:
        path: "{{ workdir }}/id_rsa"
      register: maas_ssh_key

    - name: Render cloud-init meta-data
      template:
        src: cloud-init/meta-data.yaml.j2
        dest: "{{ workdir }}/meta-data"
      register: cloudinit_metadata

    - name: Render cloud-init user-data
      template:
        src: cloud-init/user-data.yaml.j2
        dest: "{{ workdir }}/user-data"
      vars:
        maas_ssh_pubkey: "{{ maas_ssh_key.public_key }}"
      register: cloudinit_userdata

    - name: Render cloud-init nework-config
      template:
        src: cloud-init/network-config.yaml.j2
        dest: "{{ workdir }}/network-config"
      register: cloudinit_networkconfig

    - name: Validate cloud-init user data
      shell:
        cmd: |
          cloud-init schema --config-file user-data
        chdir: "{{ workdir }}"
      when: cloudinit_userdata.changed

    - name: Stat config.iso
      stat:
        path: "{{ workdir }}/config.iso"
      register: config_iso

    - name: Generate cloud-init config.iso
      shell:
        cmd: |
          genisoimage -o config.iso -V cidata -r -J user-data meta-data network-config
        chdir: "{{ workdir }}"
      when: |
        cloudinit_userdata.changed or
        cloudinit_metadata.changed or
        cloudinit_networkconfig.changed or
        not config_iso.stat.exists

    - name: Deploy Virsh network for MAAS
      community.libvirt.virt_net:
        name: maas
        state: "{{ item }}"
        autostart: true
        xml: '{{ lookup("template", "templates/maasbr0.xml.j2") }}'
      with_items: [present, active]

    # - name: Generate MAAS controller VM XML
    #   shell:
    #     cmd: |
    #       virt-install \
    #         --name maas-controller \
    #         --memory 4096 \
    #         --vcpus 2 \
    #         --os-type linux \
    #         --os-variant ubuntu22.04 \
    #         --import \
    #         --disk path=disk.img,bus=virtio,format=qcow2,cache=none,size=50 \
    #         --disk path=config.iso,device=cdrom \
    #         --network bridge=maasbr0 \
    #         --nographics \
    #         --print-xml \
    #         --dry-run \
    #       | tee maas-controller.xml
    #     creates: maas-controller.xml
    #     chdir: "{{ workdir }}"

    - name: Deploy MAAS controller VM from XML
      community.libvirt.virt:
        name: maas-controller
        command: define
        xml: "{{ lookup('template', 'templates/maas-controller.xml.j2') }}"

    - name: Start MAAS controller VM
      community.libvirt.virt:
        name: maas-controller
        state: running
