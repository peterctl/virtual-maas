- import_tasks: "{{ playbook_dir }}/ansible/tasks/output_dir.yaml"

- name: Create private key
  community.crypto.openssl_privatekey:
    path: "{{ output_dir }}/landscape.key"
    return_content: true
  register: privatekey

- name: Create certificate signing request
  community.crypto.openssl_csr:
    path: "{{ output_dir }}/landscape.csr"
    privatekey_path: "{{ privatekey.filename }}"
    common_name: "{{ landscape_api_fqdn }}"
  register: csr

- name: Create certificate
  community.crypto.x509_certificate:
    path: "{{ output_dir }}/landscape.crt"
    privatekey_path: "{{ privatekey.filename }}"
    csr_path: "{{ csr.filename }}"
    provider: selfsigned
    return_content: true
  register: certificate

- name: Create Juju model for Landscape
  shell: |
    juju add-model {{ juju_model }} {{ juju_cloud }} --config default-series={{ model_series }}
  register: add_model_cmd
  changed_when: "add_model_cmd.rc == 0 and 'already exists' not in add_model_cmd.stderr"
  failed_when: "add_model_cmd.rc != 0 and 'already exists' not in add_model_cmd.stderr"

- name: Generate the bundle
  template:
    src: templates/landscape-bundle.yaml
    dest: "{{ output_dir }}/landscape-bundle.yaml"
  vars:
    ssl_key: "{{ privatekey.privatekey | b64encode }}"
    ssl_cert: "{{ certificate.certificate | b64encode }}"
  register: bundle_template

- name: Deploy the bundle
  shell:
    cmd: |
      juju deploy -m {{ juju_model }} ./landscape-bundle.yaml --map-machines=existing
    chdir: "{{ output_dir }}"
  environment:
    JUJU_MODEL: "{{ juju_model }}"

- name: Wait for Landscape to be ready
  shell:
    cmd: |
      while true; do
        status=$(juju status --format json)
        all_units=$(
          echo "$status" |
            jq -r --arg app {{ item }} '
                .applications[$app].units | keys[]
              ' |
            wc -l
        )
        ready_units=$(
          echo "$status" |
            jq -r --arg app {{ item }} '
                .applications[$app].units | to_entries[] |
                  select(
                    .value["workload-status"].current=="active" and
                    .value["juju-status"].current == "idle"
                  ) |
                  .key
              ' |
            wc -l
        )
        if [[ "$all_units" == "$ready_units" ]]; then
          break
        fi
        sleep 5
      done
    executable: /bin/bash
  environment:
    JUJU_MODEL: "{{ juju_model }}"
  with_items:
    - haproxy
    - landscape-server

- name: Find the HAProxy and PostgreSQL IPs
  shell: |
    juju status --format json | jq -r '
        . as $root |
        ( $root.applications.haproxy.units[] | select(.leader)."public-address" ) as $haproxy_ip |
        ( $root.applications.postgresql.units[] | select(.leader)."public-address" ) as $psql_ip |
        { haproxy_ip: $haproxy_ip, psql_ip: $psql_ip }
      '
  environment:
    JUJU_MODEL: "{{ juju_model }}"
  register: ips_cmd

- name: Find the PostgreSQL operator password
  shell: |
    juju run-action --wait postgresql/leader get-password username=operator |
      yq -r '.[].results.password'
  environment:
    JUJU_MODEL: "{{ juju_model }}"
  register: operator_pass_cmd

- set_fact:
    ips: "{{ ips_cmd.stdout | from_json }}"
    operator_pass: "{{ operator_pass_cmd.stdout }}"

- name: Get or create the Landscape API DNS record
  shell:
    cmd: |
      get_dnsrecord=$(
        maas {{ maas_user }} dnsresources read |
          jq -r --arg fqdn {{ landscape_api_fqdn }} '.[] | select(.fqdn==$fqdn)'
      )
      if [[ "$get_dnsrecord" == "" ]]; then
        maas {{ maas_user }} dnsresources create \
          fqdn={{ landscape_api_fqdn }} \
          ip_addresses={{ ips.haproxy_ip }}
        retval=$?
        echo changed=true >&2
        exit $retval
      else
        has_correct_ip=$(
          echo "$get_dnsrecord" |
            jq -r --arg ip_address {{ ips.haproxy_ip }} '
                .ip_addresses[].ip | contains($ip_address)
              '
        )
        if $has_correct_ip; then
          echo "$get_dnsrecord"
          echo changed=false >&2
          exit 0
        else
          dnsrecord_id=$(echo "get_dnsrecord" | jq -r .id)
          maas {{ maas_user }} dnsresource update $dnsrecord_id \
            fqdn={{ landscape_api_fqdn }} \
            ip_addresses={{ ips.haproxy_ip }}
          retval=$?
          echo changed=true >&2
          exit $retval
        fi
      fi
    executable: /bin/bash
  register: dnsrecord
  changed_when: dnsrecord.stderr == "changed=true" and dnsrecord.rc == 0
  failed_when: dnsrecord.rc != 0

- set_fact:
    haproxy_url_dns: "https://{{ landscape_api_fqdn }}"
    haproxy_url_ip: "https://{{ ips.haproxy_ip }}"
    psql_uri: "postgresql://operator:{{ operator_pass }}@{{ ips.psql_ip }}:5432"

- name: Bootstrap the Landscape account
  shell: |
    juju exec --unit landscape-server/leader -- \
      sudo /opt/canonical/landscape/bootstrap-account \
        --root_url "{{ haproxy_url_ip }}" \
        --admin_name "{{ admin_user }}" \
        --admin_email "{{ admin_user }}@landscape" \
        --admin_password "{{ admin_password }}" \
        --registration_key "{{ registration_key }}"
  environment:
    JUJU_MODEL: "{{ juju_model }}"
  register: account_cmd
  changed_when: |
    "Account 'standalone' already exists" not in account_cmd.stderr and account_cmd.rc == 0
  failed_when: |
    "Account 'standalone' already exists" not in account_cmd.stderr and account_cmd.rc != 0

- name: Find the Landscape API key and secret
  shell:
    python3 {{ playbook_dir }}/scripts/landscape_get_api_credentials.py {{ psql_uri }}
  environment:
    JUJU_MODEL: "{{ juju_model }}"
  register: landscape_api_credentials_cmd

- set_fact:
    landscape_api_credentials: "{{ landscape_api_credentials_cmd.stdout | from_json }}"

- set_fact:
    landscape_api:
      ip: "{{ ips.haproxy_ip }}"
      fqdn: "{{ landscape_api_fqdn }}"
      url_ip: "{{ haproxy_url_ip }}"
      url_fqdn: "{{ haproxy_url_dns }}"
      key: "{{ landscape_api_credentials.access_key_id }}"
      secret: "{{ landscape_api_credentials.access_secret_key }}"
      ssl_ca_cert: "{{ certificate.certificate }}"
      ssl_ca_file: "{{ certificate.filename }}"

- name: Generate Landscape environment variables
  copy:
    dest: "{{ output_dir }}/landscaperc"
    content: |
      export LANDSCAPE_API_URI="{{ landscape_api.url_ip }}"
      export LANDSCAPE_API_KEY="{{ landscape_api.key }}"
      export LANDSCAPE_API_SECRET="{{ landscape_api.secret }}"
      export LANDSCAPE_API_SSL_CA_FILE="{{ landscape_api.ssl_ca_file }}"
