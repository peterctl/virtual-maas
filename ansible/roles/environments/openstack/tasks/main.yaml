- import_tasks: "{{ playbook_dir }}/ansible/tasks/output_dir.yaml"

- name: Clone the stsstack-bundles repo
  git:
    repo: https://github.com/canonical/stsstack-bundles.git
    dest: "{{ output_dir }}/stsstack-bundles"

- name: Install the OpenStack clients
  apt:
    pkg:
      - python3-openstackclient
      - python3-keystoneclient
      - python3-neutronclient

- name: Generate the OpenStack bundle
  shell:
    cmd: |
      ./generate-bundle.sh \
        --name openstack \
        --default-binding mgmt \
        --model-constraints tags=openstack \
        --hyperconverged \
        --ha \
        --vault-ha \
        --num-compute {{ vm_count }} \
        --vip-addr-start {{ vip_addr_start }}
    chdir: "{{ output_dir }}/stsstack-bundles/openstack"

- name: Amend the generated bundle
  shell:
    cmd: |
      # Remove the `storage` definition under nova-compute.
      yq -i 'del(.applications[].storage)' b/openstack/openstack.yaml
    chdir: "{{ output_dir }}/stsstack-bundles/openstack"

- name: Deploy the bundle
  shell:
    cmd: $(cat b/openstack/command) {{ extra_deploy_args }}
    chdir: "{{ output_dir }}/stsstack-bundles/openstack"
    executable: /bin/bash

- name: Wait for Vault to be ready to initialize
  shell:
    cmd: |
      while true; do
        status=$(juju status --format json)
        all_units=$(
          echo "$status" |
            jq -r '.applications.vault.units | keys[]' |
            wc -l
        )
        blocked_units=$(
          echo "$status" |
            jq -r '
                .applications.vault.units | to_entries[] |
                  select(
                    .value["workload-status"].current == "blocked" and
                    .value["workload-status"].message == "Vault needs to be initialized" and
                    .value["juju-status"].current == "idle"
                  ) |
                  .key
              ' |
            wc -l
        )
        if [[ "$all_units" == "$blocked_units" ]]; then
          echo ready_to_init
          break
        fi
        ready_units=$(
          echo "$status" |
            jq -r '
                .applications.vault.units | to_entries[] |
                  select(
                    .value["workload-status"].current == "active" and
                    (.value["workload-status"].message | startswith("Unit is ready")) and
                    .value["juju-status"].current == "idle"
                  ) |
                  .key
              ' |
            wc -l
        )
        sealed_units=$(
          echo "$status" |
            jq -r '
                .applications.vault.units | to_entries[] |
                  select(
                    .value["workload-status"].current == "blocked" and
                    .value["workload-status"].message == "Unit is sealed" and
                    .value["juju-status"].current == "idle"
                  ) |
                  .key
              ' |
            wc -l
        )
        if [[ "$all_units" == "$(($ready_units + $sealed_units))" ]]; then
          echo skip_init
          break
        fi
        sleep 5
      done
    executable: /bin/bash
  register: vault_waitready

- name: Initialize Vault
  shell:
    cmd: ./tools/vault-unseal-and-authorise.sh
    chdir: "{{ output_dir }}/stsstack-bundles/openstack"
    executable: /bin/bash
  when: "'ready_to_init' in vault_waitready.stdout"

- name: Wait for the OpenStack API to be ready
  shell:
    cmd: |
      while true; do
        status=$(juju status --format json)
        all_units=$(
          echo "$status" |
            jq -r --arg app {{ item }} '
                .applications[$app].units | keys[]
              ' |
            wc -l
        )
        ready_units=$(
          echo "$status" |
            jq -r --arg app {{ item }} '
                .applications[$app].units | to_entries[] |
                  select(
                    .value["workload-status"].current=="active" and
                    .value["juju-status"].current == "idle"
                  ) |
                  .key
              ' |
            wc -l
        )
        if [[ "$all_units" == "$ready_units" ]]; then
          break
        fi
        sleep 5
      done
    chdir: "{{ output_dir }}/stsstack-bundles/openstack"
    executable: /bin/bash
  with_items:
    - keystone
    - keystone-hacluster
    - neutron-api
    - neutron-api-hacluster
    - nova-cloud-controller
    - nova-cloud-controller-hacluster

- name: Configure the deployed environment
  shell:
    cmd: |
      source novarc
      ./configure metal
    chdir: "{{ output_dir }}/stsstack-bundles/openstack"
    executable: /bin/bash

- name: Grab the Vault root CA cert
  shell:
    cmd: |
      juju run-action --wait vault/leader get-root-ca |
        yq -r '.[].results.output' >{{ output_dir }}/vault-root-ca.crt

- name: Collect the OpenStack novarc credentials
  shell:
    cmd: |
      source novarc >/dev/null
      env | grep '^OS_' | sed 's/^/export /'
      echo export OS_CACERT={{ output_dir }}/vault-root-ca.crt
    chdir: "{{ output_dir }}/stsstack-bundles/openstack"
    executable: /bin/bash
  register: novarc_cmd

- name: Save the OpenStack novarc credentials
  copy:
    dest: "{{ output_dir }}/novarc"
    content: "{{ novarc_cmd.stdout }}"
