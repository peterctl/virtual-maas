- name: Install jq
  become: true
  apt:
    name: jq

- name: Get primary rack
  shell: maas {{ maas.user }} rack-controllers read | jq -r '.[0]'
  register: primary_rack_cmd
- set_fact:
    primary_rack: "{{ primary_rack_cmd.stdout | from_json }}"

- name: Get or create space
  block:
    - shell: maas {{ maas.user }} space read {{ network.name }}
      register: space_cmd
  rescue:
    - shell: maas {{ maas.user }} spaces create name={{ network.name }}
      register: space_cmd
- set_fact:
    space: "{{ space_cmd.stdout | from_json }}"

- name: Get subnet
  shell: maas {{ maas.user }} subnet read {{ network.cidr }}
  register: subnet_cmd
- set_fact:
    subnet: "{{ subnet_cmd.stdout | from_json }}"

- name: Update subnet gateway_ip
  shell: |
    maas {{ maas.user }} subnet update {{ subnet.id }} \
      gateway_ip={{ network.gateway_ip }}
  when: network.gateway_ip != subnet.gateway_ip

- name: Get or create dynamic IP range for DHCP
  include_tasks:
    file: configure-ip-range.yaml
  vars:
    subnet_id: "{{ subnet.id }}"
    iprange_type: dynamic
    iprange_start: "{{ network.dhcp.start }}"
    iprange_end: "{{ network.dhcp.end }}"

- name: Get or create reserved IP ranges
  include_tasks:
    file: configure-ip-range.yaml
  vars:
    subnet_id: "{{ subnet.id }}"
    iprange_type: reserved
    iprange_start: "{{ item.start }}"
    iprange_end: "{{ item.end }}"
  with_items: "{{ network.reserved_ranges }}"

- name: Configure the MAAS vlan
  shell: |
    maas admin vlan update {{ subnet.vlan.fabric_id }} {{ subnet.vlan.vid }} \
      dhcp_on=True \
      primary_rack={{ primary_rack.system_id }} \
      space={{ space.id }}
  when: >
    subnet.vlan.primary_rack != primary_rack.system_id or
    subnet.vlan.space != space.name or
    subnet.vlan.dhcp_on != True
